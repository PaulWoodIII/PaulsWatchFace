//
//  ClockFaceKit.m
//  ClickKit
//
//  Created by Paul Wood on 11/8/14.
//  Copyright (c) 2014 paulwoodiii.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "ClockFaceKit.h"


@implementation ClockFaceKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawClock1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// FaceSymbol Drawing
    CGRect faceSymbolRect = CGRectMake(0, 0, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(faceSymbolRect);
    CGContextTranslateCTM(context, faceSymbolRect.origin.x, faceSymbolRect.origin.y);

    [ClockFaceKit drawDial];
    CGContextRestoreGState(context);


    //// Symbol Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, 60 * M_PI / 180);

    CGRect symbolRect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [ClockFaceKit drawHrHand];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// MinHandSymbol Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -6 * M_PI / 180);

    CGRect minHandSymbolRect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(minHandSymbolRect);
    CGContextTranslateCTM(context, minHandSymbolRect.origin.x, minHandSymbolRect.origin.y);

    [ClockFaceKit drawMinHand];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// hoursTextSymbol Drawing
    CGRect hoursTextSymbolRect = CGRectMake(0, -1, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(hoursTextSymbolRect);
    CGContextTranslateCTM(context, hoursTextSymbolRect.origin.x, hoursTextSymbolRect.origin.y);

    [ClockFaceKit drawHoursText];
    CGContextRestoreGState(context);


    //// minuteNothesSymbol Drawing
    CGRect minuteNothesSymbolRect = CGRectMake(0, -1, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(minuteNothesSymbolRect);
    CGContextTranslateCTM(context, minuteNothesSymbolRect.origin.x, minuteNothesSymbolRect.origin.y);

    [ClockFaceKit drawMinuteNotches];
    CGContextRestoreGState(context);


    //// hoursNotchesSymbol Drawing
    CGRect hoursNotchesSymbolRect = CGRectMake(0, 0, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(hoursNotchesSymbolRect);
    CGContextTranslateCTM(context, hoursNotchesSymbolRect.origin.x, hoursNotchesSymbolRect.origin.y);

    [ClockFaceKit drawHoursNotches];
    CGContextRestoreGState(context);


    //// Symbol 2 Drawing
    CGRect symbol2Rect = CGRectMake(0, 0, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol2Rect);
    CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

    [ClockFaceKit drawRim];
    CGContextRestoreGState(context);
}

+ (void)drawMinFace
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* circleColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* secondsHandColor = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];
    UIColor* minuteDialColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(4, 4, 120, 120)];
    [minuteDialColor setFill];
    [ovalPath fill];
    [circleColor setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];


    //// Seconds Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 64, 64);
    CGContextRotateCTM(context, -12 * M_PI / 180);

    UIBezierPath* secondsPath = [UIBezierPath bezierPathWithRect: CGRectMake(-1, -50, 2, 50)];
    [secondsHandColor setFill];
    [secondsPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawComposed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Symbol Drawing
    CGContextSaveGState(context);
    CGContextScaleCTM(context, 2, 2);

    CGRect symbolRect = CGRectMake(0, 0, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [ClockFaceKit drawClock1];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 177, 285);
    CGContextScaleCTM(context, 2, 2);

    CGRect symbol2Rect = CGRectMake(0, 0, 79.11, 79.11);
    CGContextSaveGState(context);
    UIRectClip(symbol2Rect);
    CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);
    CGContextScaleCTM(context, symbol2Rect.size.width / 128, symbol2Rect.size.height / 128);

    [ClockFaceKit drawMinFace];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);
}

+ (void)drawMinHand
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* minHandColor = [UIColor colorWithRed: 0.652 green: 0.8 blue: 0.32 alpha: 1];

    //// minutesHand Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);

    UIBezierPath* minutesHandPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -79, 4, 79)];
    [minHandColor setFill];
    [minutesHandPath fill];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(124, 124, 8, 8)];
    [minHandColor setFill];
    [ovalPath fill];
}

+ (void)drawHrHand
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* hourHandColor = [UIColor colorWithRed: 0.32 green: 0.8 blue: 0.616 alpha: 1];

    //// hoursHand Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 126.89);

    UIBezierPath* hoursHandPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -48.89, 4, 48.89)];
    [hourHandColor setFill];
    [hoursHandPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawHoursText
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Hour Numbers
    {
        //// TextTwelve Drawing
        CGRect textTwelveRect = CGRectMake(118, 16, 24, 17);
        {
            NSString* textContent = @"12";
            NSMutableParagraphStyle* textTwelveStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textTwelveStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textTwelveFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textTwelveStyle};

            CGFloat textTwelveTextHeight = [textContent boundingRectWithSize: CGSizeMake(textTwelveRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textTwelveFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textTwelveRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textTwelveRect), CGRectGetMinY(textTwelveRect) + (CGRectGetHeight(textTwelveRect) - textTwelveTextHeight) / 2, CGRectGetWidth(textTwelveRect), textTwelveTextHeight) withAttributes: textTwelveFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextEleven Drawing
        CGRect textElevenRect = CGRectMake(71, 33, 20, 15);
        {
            NSString* textContent = @"11";
            NSMutableParagraphStyle* textElevenStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textElevenStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textElevenFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textElevenStyle};

            CGFloat textElevenTextHeight = [textContent boundingRectWithSize: CGSizeMake(textElevenRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textElevenFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textElevenRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textElevenRect), CGRectGetMinY(textElevenRect) + (CGRectGetHeight(textElevenRect) - textElevenTextHeight) / 2, CGRectGetWidth(textElevenRect), textElevenTextHeight) withAttributes: textElevenFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextTen Drawing
        CGRect textTenRect = CGRectMake(33, 73, 20, 15);
        {
            NSString* textContent = @"10";
            NSMutableParagraphStyle* textTenStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textTenStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textTenFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textTenStyle};

            CGFloat textTenTextHeight = [textContent boundingRectWithSize: CGSizeMake(textTenRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textTenFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textTenRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textTenRect), CGRectGetMinY(textTenRect) + (CGRectGetHeight(textTenRect) - textTenTextHeight) / 2, CGRectGetWidth(textTenRect), textTenTextHeight) withAttributes: textTenFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextNine Drawing
        CGRect textNineRect = CGRectMake(18, 121, 10, 13);
        {
            NSString* textContent = @"9";
            NSMutableParagraphStyle* textNineStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textNineStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textNineFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textNineStyle};

            CGFloat textNineTextHeight = [textContent boundingRectWithSize: CGSizeMake(textNineRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textNineFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textNineRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textNineRect), CGRectGetMinY(textNineRect) + (CGRectGetHeight(textNineRect) - textNineTextHeight) / 2, CGRectGetWidth(textNineRect), textNineTextHeight) withAttributes: textNineFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextEight Drawing
        CGRect textEightRect = CGRectMake(36, 168, 10, 17);
        {
            NSString* textContent = @"8";
            NSMutableParagraphStyle* textEightStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textEightStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textEightFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textEightStyle};

            CGFloat textEightTextHeight = [textContent boundingRectWithSize: CGSizeMake(textEightRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textEightFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textEightRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textEightRect), CGRectGetMinY(textEightRect) + (CGRectGetHeight(textEightRect) - textEightTextHeight) / 2, CGRectGetWidth(textEightRect), textEightTextHeight) withAttributes: textEightFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextSeven Drawing
        CGRect textSevenRect = CGRectMake(72, 205, 10, 17);
        {
            NSString* textContent = @"7";
            NSMutableParagraphStyle* textSevenStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textSevenStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textSevenFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textSevenStyle};

            CGFloat textSevenTextHeight = [textContent boundingRectWithSize: CGSizeMake(textSevenRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textSevenFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textSevenRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textSevenRect), CGRectGetMinY(textSevenRect) + (CGRectGetHeight(textSevenRect) - textSevenTextHeight) / 2, CGRectGetWidth(textSevenRect), textSevenTextHeight) withAttributes: textSevenFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextSix Drawing
        CGRect textSixRect = CGRectMake(123, 222, 16, 17);
        {
            NSString* textContent = @"6";
            NSMutableParagraphStyle* textSixStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textSixStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textSixFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textSixStyle};

            CGFloat textSixTextHeight = [textContent boundingRectWithSize: CGSizeMake(textSixRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textSixFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textSixRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textSixRect), CGRectGetMinY(textSixRect) + (CGRectGetHeight(textSixRect) - textSixTextHeight) / 2, CGRectGetWidth(textSixRect), textSixTextHeight) withAttributes: textSixFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextFive Drawing
        CGRect textFiveRect = CGRectMake(174, 205, 10, 17);
        {
            NSString* textContent = @"5";
            NSMutableParagraphStyle* textFiveStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textFiveStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFiveFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textFiveStyle};

            CGFloat textFiveTextHeight = [textContent boundingRectWithSize: CGSizeMake(textFiveRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFiveFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textFiveRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textFiveRect), CGRectGetMinY(textFiveRect) + (CGRectGetHeight(textFiveRect) - textFiveTextHeight) / 2, CGRectGetWidth(textFiveRect), textFiveTextHeight) withAttributes: textFiveFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextFour Drawing
        CGRect textFourRect = CGRectMake(213, 169, 8, 17);
        {
            NSString* textContent = @"4";
            NSMutableParagraphStyle* textFourStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textFourStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFourFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textFourStyle};

            CGFloat textFourTextHeight = [textContent boundingRectWithSize: CGSizeMake(textFourRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFourFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textFourRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textFourRect), CGRectGetMinY(textFourRect) + (CGRectGetHeight(textFourRect) - textFourTextHeight) / 2, CGRectGetWidth(textFourRect), textFourTextHeight) withAttributes: textFourFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextThree Drawing
        CGRect textThreeRect = CGRectMake(229, 119, 16, 17);
        {
            NSString* textContent = @"3";
            NSMutableParagraphStyle* textThreeStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textThreeStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textThreeFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textThreeStyle};

            CGFloat textThreeTextHeight = [textContent boundingRectWithSize: CGSizeMake(textThreeRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textThreeFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textThreeRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textThreeRect), CGRectGetMinY(textThreeRect) + (CGRectGetHeight(textThreeRect) - textThreeTextHeight) / 2, CGRectGetWidth(textThreeRect), textThreeTextHeight) withAttributes: textThreeFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextTwo Drawing
        CGRect textTwoRect = CGRectMake(212, 68, 10, 17);
        {
            NSString* textContent = @"2";
            NSMutableParagraphStyle* textTwoStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textTwoStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textTwoFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textTwoStyle};

            CGFloat textTwoTextHeight = [textContent boundingRectWithSize: CGSizeMake(textTwoRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textTwoFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textTwoRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textTwoRect), CGRectGetMinY(textTwoRect) + (CGRectGetHeight(textTwoRect) - textTwoTextHeight) / 2, CGRectGetWidth(textTwoRect), textTwoTextHeight) withAttributes: textTwoFontAttributes];
            CGContextRestoreGState(context);
        }


        //// TextOne Drawing
        CGRect textOneRect = CGRectMake(174, 32, 8, 17);
        {
            NSString* textContent = @"1";
            NSMutableParagraphStyle* textOneStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
            textOneStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textOneFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: UIFont.labelFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textOneStyle};

            CGFloat textOneTextHeight = [textContent boundingRectWithSize: CGSizeMake(textOneRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textOneFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textOneRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textOneRect), CGRectGetMinY(textOneRect) + (CGRectGetHeight(textOneRect) - textOneTextHeight) / 2, CGRectGetWidth(textOneRect), textOneTextHeight) withAttributes: textOneFontAttributes];
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawHoursNotches
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* hourMarkColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// HourNotch
    {
        //// twelveNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);

        UIBezierPath* twelveNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [twelveNotchPath fill];

        CGContextRestoreGState(context);


        //// elevenNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, -30 * M_PI / 180);

        UIBezierPath* elevenNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [elevenNotchPath fill];

        CGContextRestoreGState(context);


        //// tenNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, -60 * M_PI / 180);

        UIBezierPath* tenNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [tenNotchPath fill];

        CGContextRestoreGState(context);


        //// nineNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, -90 * M_PI / 180);

        UIBezierPath* nineNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -122, 4, 10)];
        [hourMarkColor setFill];
        [nineNotchPath fill];

        CGContextRestoreGState(context);


        //// eightNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, -120 * M_PI / 180);

        UIBezierPath* eightNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [eightNotchPath fill];

        CGContextRestoreGState(context);


        //// sevenNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, -150 * M_PI / 180);

        UIBezierPath* sevenNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [sevenNotchPath fill];

        CGContextRestoreGState(context);


        //// sixNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);

        UIBezierPath* sixNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, 113, 4, 10)];
        [hourMarkColor setFill];
        [sixNotchPath fill];

        CGContextRestoreGState(context);


        //// fiveNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, 150 * M_PI / 180);

        UIBezierPath* fiveNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [fiveNotchPath fill];

        CGContextRestoreGState(context);


        //// fourNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, 120 * M_PI / 180);

        UIBezierPath* fourNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [fourNotchPath fill];

        CGContextRestoreGState(context);


        //// threeNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, 90 * M_PI / 180);

        UIBezierPath* threeNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -122, 4, 10)];
        [hourMarkColor setFill];
        [threeNotchPath fill];

        CGContextRestoreGState(context);


        //// twoNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, 60 * M_PI / 180);

        UIBezierPath* twoNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [twoNotchPath fill];

        CGContextRestoreGState(context);


        //// oneNotch Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128, 126);
        CGContextRotateCTM(context, 30 * M_PI / 180);

        UIBezierPath* oneNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(-2, -121, 4, 10)];
        [hourMarkColor setFill];
        [oneNotchPath fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawDial
{
    //// Color Declarations
    UIColor* mainDialColor = [UIColor colorWithRed: 0.912 green: 0.912 blue: 0.912 alpha: 1];

    //// Face Drawing
    UIBezierPath* facePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8, 7, 240, 240)];
    [mainDialColor setFill];
    [facePath fill];
}

+ (void)drawMinuteNotchSingle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* minTickColor = [UIColor colorWithRed: 0.106 green: 0.259 blue: 0.51 alpha: 1];

    //// oneNotch Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 127, 127);

    UIBezierPath* oneNotchPath = [UIBezierPath bezierPathWithRect: CGRectMake(0, -121, 2, 10)];
    [minTickColor setFill];
    [oneNotchPath fill];

    CGContextRestoreGState(context);
}

+ (void)drawMinuteNotches
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Symbol Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);

    CGRect symbolRect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -6 * M_PI / 180);

    CGRect symbol2Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol2Rect);
    CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -12 * M_PI / 180);

    CGRect symbol3Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol3Rect);
    CGContextTranslateCTM(context, symbol3Rect.origin.x, symbol3Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -18 * M_PI / 180);

    CGRect symbol4Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol4Rect);
    CGContextTranslateCTM(context, symbol4Rect.origin.x, symbol4Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -24 * M_PI / 180);

    CGRect symbol5Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol5Rect);
    CGContextTranslateCTM(context, symbol5Rect.origin.x, symbol5Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 6 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -30 * M_PI / 180);

    CGRect symbol6Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol6Rect);
    CGContextTranslateCTM(context, symbol6Rect.origin.x, symbol6Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 7 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -36 * M_PI / 180);

    CGRect symbol7Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol7Rect);
    CGContextTranslateCTM(context, symbol7Rect.origin.x, symbol7Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 8 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -42 * M_PI / 180);

    CGRect symbol8Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol8Rect);
    CGContextTranslateCTM(context, symbol8Rect.origin.x, symbol8Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 9 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -48 * M_PI / 180);

    CGRect symbol9Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol9Rect);
    CGContextTranslateCTM(context, symbol9Rect.origin.x, symbol9Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 10 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -54 * M_PI / 180);

    CGRect symbol10Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol10Rect);
    CGContextTranslateCTM(context, symbol10Rect.origin.x, symbol10Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 11 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -60 * M_PI / 180);

    CGRect symbol11Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol11Rect);
    CGContextTranslateCTM(context, symbol11Rect.origin.x, symbol11Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 12 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -66 * M_PI / 180);

    CGRect symbol12Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol12Rect);
    CGContextTranslateCTM(context, symbol12Rect.origin.x, symbol12Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 13 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -72 * M_PI / 180);

    CGRect symbol13Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol13Rect);
    CGContextTranslateCTM(context, symbol13Rect.origin.x, symbol13Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 14 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -78 * M_PI / 180);

    CGRect symbol14Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol14Rect);
    CGContextTranslateCTM(context, symbol14Rect.origin.x, symbol14Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 15 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -84 * M_PI / 180);

    CGRect symbol15Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol15Rect);
    CGContextTranslateCTM(context, symbol15Rect.origin.x, symbol15Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 16 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect symbol16Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol16Rect);
    CGContextTranslateCTM(context, symbol16Rect.origin.x, symbol16Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 17 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -96 * M_PI / 180);

    CGRect symbol17Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol17Rect);
    CGContextTranslateCTM(context, symbol17Rect.origin.x, symbol17Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 18 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -102 * M_PI / 180);

    CGRect symbol18Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol18Rect);
    CGContextTranslateCTM(context, symbol18Rect.origin.x, symbol18Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 19 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -108 * M_PI / 180);

    CGRect symbol19Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol19Rect);
    CGContextTranslateCTM(context, symbol19Rect.origin.x, symbol19Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 20 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -114 * M_PI / 180);

    CGRect symbol20Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol20Rect);
    CGContextTranslateCTM(context, symbol20Rect.origin.x, symbol20Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 21 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -120 * M_PI / 180);

    CGRect symbol21Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol21Rect);
    CGContextTranslateCTM(context, symbol21Rect.origin.x, symbol21Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 22 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -126 * M_PI / 180);

    CGRect symbol22Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol22Rect);
    CGContextTranslateCTM(context, symbol22Rect.origin.x, symbol22Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 23 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -132 * M_PI / 180);

    CGRect symbol23Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol23Rect);
    CGContextTranslateCTM(context, symbol23Rect.origin.x, symbol23Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 24 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -138 * M_PI / 180);

    CGRect symbol24Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol24Rect);
    CGContextTranslateCTM(context, symbol24Rect.origin.x, symbol24Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 25 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -144 * M_PI / 180);

    CGRect symbol25Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol25Rect);
    CGContextTranslateCTM(context, symbol25Rect.origin.x, symbol25Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 26 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -150 * M_PI / 180);

    CGRect symbol26Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol26Rect);
    CGContextTranslateCTM(context, symbol26Rect.origin.x, symbol26Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 27 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -156 * M_PI / 180);

    CGRect symbol27Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol27Rect);
    CGContextTranslateCTM(context, symbol27Rect.origin.x, symbol27Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 28 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -162 * M_PI / 180);

    CGRect symbol28Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol28Rect);
    CGContextTranslateCTM(context, symbol28Rect.origin.x, symbol28Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 29 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -168 * M_PI / 180);

    CGRect symbol29Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol29Rect);
    CGContextTranslateCTM(context, symbol29Rect.origin.x, symbol29Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 30 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -174 * M_PI / 180);

    CGRect symbol30Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol30Rect);
    CGContextTranslateCTM(context, symbol30Rect.origin.x, symbol30Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 31 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -180 * M_PI / 180);

    CGRect symbol31Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol31Rect);
    CGContextTranslateCTM(context, symbol31Rect.origin.x, symbol31Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 32 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -186 * M_PI / 180);

    CGRect symbol32Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol32Rect);
    CGContextTranslateCTM(context, symbol32Rect.origin.x, symbol32Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 33 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -192 * M_PI / 180);

    CGRect symbol33Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol33Rect);
    CGContextTranslateCTM(context, symbol33Rect.origin.x, symbol33Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 34 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -198 * M_PI / 180);

    CGRect symbol34Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol34Rect);
    CGContextTranslateCTM(context, symbol34Rect.origin.x, symbol34Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 35 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -204 * M_PI / 180);

    CGRect symbol35Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol35Rect);
    CGContextTranslateCTM(context, symbol35Rect.origin.x, symbol35Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 36 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -210 * M_PI / 180);

    CGRect symbol36Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol36Rect);
    CGContextTranslateCTM(context, symbol36Rect.origin.x, symbol36Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 37 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -216 * M_PI / 180);

    CGRect symbol37Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol37Rect);
    CGContextTranslateCTM(context, symbol37Rect.origin.x, symbol37Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 38 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -222 * M_PI / 180);

    CGRect symbol38Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol38Rect);
    CGContextTranslateCTM(context, symbol38Rect.origin.x, symbol38Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 39 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -228 * M_PI / 180);

    CGRect symbol39Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol39Rect);
    CGContextTranslateCTM(context, symbol39Rect.origin.x, symbol39Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 40 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -234 * M_PI / 180);

    CGRect symbol40Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol40Rect);
    CGContextTranslateCTM(context, symbol40Rect.origin.x, symbol40Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 41 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -240 * M_PI / 180);

    CGRect symbol41Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol41Rect);
    CGContextTranslateCTM(context, symbol41Rect.origin.x, symbol41Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 42 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -246 * M_PI / 180);

    CGRect symbol42Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol42Rect);
    CGContextTranslateCTM(context, symbol42Rect.origin.x, symbol42Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 43 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -252 * M_PI / 180);

    CGRect symbol43Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol43Rect);
    CGContextTranslateCTM(context, symbol43Rect.origin.x, symbol43Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 44 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -258 * M_PI / 180);

    CGRect symbol44Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol44Rect);
    CGContextTranslateCTM(context, symbol44Rect.origin.x, symbol44Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 45 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -264 * M_PI / 180);

    CGRect symbol45Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol45Rect);
    CGContextTranslateCTM(context, symbol45Rect.origin.x, symbol45Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 46 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -270 * M_PI / 180);

    CGRect symbol46Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol46Rect);
    CGContextTranslateCTM(context, symbol46Rect.origin.x, symbol46Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 47 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -276 * M_PI / 180);

    CGRect symbol47Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol47Rect);
    CGContextTranslateCTM(context, symbol47Rect.origin.x, symbol47Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 48 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -282 * M_PI / 180);

    CGRect symbol48Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol48Rect);
    CGContextTranslateCTM(context, symbol48Rect.origin.x, symbol48Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 49 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -288 * M_PI / 180);

    CGRect symbol49Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol49Rect);
    CGContextTranslateCTM(context, symbol49Rect.origin.x, symbol49Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 50 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -294 * M_PI / 180);

    CGRect symbol50Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol50Rect);
    CGContextTranslateCTM(context, symbol50Rect.origin.x, symbol50Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 51 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -300 * M_PI / 180);

    CGRect symbol51Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol51Rect);
    CGContextTranslateCTM(context, symbol51Rect.origin.x, symbol51Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 52 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -306 * M_PI / 180);

    CGRect symbol52Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol52Rect);
    CGContextTranslateCTM(context, symbol52Rect.origin.x, symbol52Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 53 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -312 * M_PI / 180);

    CGRect symbol53Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol53Rect);
    CGContextTranslateCTM(context, symbol53Rect.origin.x, symbol53Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 54 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -318 * M_PI / 180);

    CGRect symbol54Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol54Rect);
    CGContextTranslateCTM(context, symbol54Rect.origin.x, symbol54Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 55 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -324 * M_PI / 180);

    CGRect symbol55Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol55Rect);
    CGContextTranslateCTM(context, symbol55Rect.origin.x, symbol55Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 56 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -330 * M_PI / 180);

    CGRect symbol56Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol56Rect);
    CGContextTranslateCTM(context, symbol56Rect.origin.x, symbol56Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 57 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -336 * M_PI / 180);

    CGRect symbol57Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol57Rect);
    CGContextTranslateCTM(context, symbol57Rect.origin.x, symbol57Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 58 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -342 * M_PI / 180);

    CGRect symbol58Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol58Rect);
    CGContextTranslateCTM(context, symbol58Rect.origin.x, symbol58Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 59 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -348 * M_PI / 180);

    CGRect symbol59Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol59Rect);
    CGContextTranslateCTM(context, symbol59Rect.origin.x, symbol59Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Symbol 60 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 128, 128);
    CGContextRotateCTM(context, -354 * M_PI / 180);

    CGRect symbol60Rect = CGRectMake(-128, -128, 256, 256);
    CGContextSaveGState(context);
    UIRectClip(symbol60Rect);
    CGContextTranslateCTM(context, symbol60Rect.origin.x, symbol60Rect.origin.y);

    [ClockFaceKit drawMinuteNotchSingle];
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);
}

+ (void)drawRim
{
    //// Color Declarations
    UIColor* circleColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Face Drawing
    UIBezierPath* facePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8, 7, 240, 240)];
    [circleColor setStroke];
    facePath.lineWidth = 4;
    [facePath stroke];
}

@end
